/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sort;

/**
 *
 * @author yuezhao
 */
public class ExternalSort {
    /**
     * 能够处理极大量数据的排序算法.
     * 
     * 外排序处理的数据不能一次装入内存，只能放在读写较慢的外存储器（通常是硬盘）上。
     * 外排序通常采用的是一种“排序-归并”的策略。在排序阶段，先读入能放在内存中的数据量，将其排序输出到一个临时文件，依此进行，将待排序数据组织为多个有序的临时文件。
     * 尔后在归并阶段将这些临时文件组合为一个大的有序文件，也即排序结果。
     * 
     * 基于归并排序
     * 
     * 例1
     * 要对900 MB的数据进行排序，但机器上只有100 MB的可用内存时，外归并排序按如下方法操作：
读入100 MB的数据至内存中，用某种常规方式（如快速排序、堆排序、归并排序等方法）在内存中完成排序。
将排序完成的数据写入磁盘。
重复步骤1和2直到所有的数据都存入了不同的100 MB的块（临时文件）中。在这个例子中，有900 MB数据，单个临时文件大小为100 MB，所以会产生9个临时文件。
读入每个临时文件（顺串）的前10 MB（ = 100 MB / (9块 + 1)）的数据放入内存中的输入缓冲区，最后的10 MB作为输出缓冲区。（实践中，将输入缓冲适当调小，而适当增大输出缓冲区能获得更好的效果。）
执行九路归并算法，将结果输出到输出缓冲区。一旦输出缓冲区满，将缓冲区中的数据写出至目标文件，清空缓冲区。一旦9个输入缓冲区中的一个变空，就从这个缓冲区关联的文件，读入下一个10M数据，除非这个文件已读完。这是“外归并排序”能在主存外完成排序的关键步骤 -- 因为“归并算法”(merge algorithm)对每一个大块只是顺序地做一轮访问(进行归并)，每个大块不用完全载入主存。
     
     *例2
     * 假设我们有1TB的数据需要排序，但是只有一台1GB内存的机器，请问如何排序？
     * 为了计算方便我们假设TB/GB/MB是以1000换算的，而且内存也有1.001G空间：
将1TB数据分1000次读入内存中，每次对1GB的数据进行排序，每次排序完将其作为一个区块结果存入磁盘中。
在内存中划分1000个通道，每个通道读入每个区块前1MB的数据，可知每个1MB都是有序的。
对这1000个有序的1MB数据进行归并。将结果存入一个1MB的缓存当中，每当这1MB缓存满的时候，将这1MB缓存存入磁盘并清空。每当任何一个1MB通道空时，我们将对应区块的下1MB数据读入这个通道。
持续执行步骤3直到所有区块的数据都被读完，这时候磁盘中就是1TB有序的数据了。

     */
}
